# Telegraf Configuration
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply surround
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})

[global_tags]
# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "60s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  # sudo touch /var/log/telegraf.log; sudo chown telegraf:telegraf /var/log/telegraf
  logfile = "/var/log/telegraf.log"
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################


# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
  urls = ["http://127.0.0.1:8086"]

  ## The target database for metrics; will be created as needed.
  database = "telegraf"

  ## Name of existing retention policy to write to.  Empty string writes to
  ## the default retention policy.  Only takes effect when using HTTP.
  # retention_policy = ""

  ## HTTP Basic Auth
  # TODO: update if using auth
  # username = "xxx"
  # password = "xxx"


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false

# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration

# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  ## Uncomment to remove deprecated metrics.
  fielddrop = ["uptime_format"]

# # Monitor APC UPSes connected to apcupsd
[[inputs.apcupsd]]
  servers = ["tcp://127.0.0.1:3551"]
  timeout = "5s"

# # Query given DNS server and gives statistics
[[inputs.dns_query]]
  servers = ["8.8.8.8"]
  domains = ["."]
  record_type = "A"
  timeout = 10
  name_override = "google_dns"

[[inputs.dns_query]]
  servers = ["1.1.1.1"]
  domains = ["."]
  record_type = "A"
  timeout = 10
  name_override = "cloudflare_dns"

# # Reload and gather from file[s] on telegraf's interval.
[[inputs.file]]
  files = ["/sys/class/thermal/thermal_zone0/temp"]
  name_override = "cpu_temperature"
  data_format = "value"
  data_type = "integer"

# # Read Kapacitor-formatted JSON metrics from one or more HTTP endpoints
[[inputs.kapacitor]]
#   ## Multiple URLs from which to read Kapacitor-formatted JSON
#   ## Default is "http://localhost:9092/kapacitor/v1/debug/vars".
  urls = [
    "http://localhost:9092/kapacitor/v1/debug/vars"
  ]
#   ## Time limit for http requests
  timeout = "5s"

# # Read metrics about network interface usage
[[inputs.net]]
  interfaces = ["eth0", "wlan0"]

# # Read TCP metrics such as established, time wait and sockets counts.
[[inputs.netstat]]

# # Read current weather and forecasts data from openweathermap.org
[[inputs.openweathermap]]
  ## OpenWeatherMap API key.
  app_id = "a1f1b3c395bf7bbcb2c9d6279b5326e9"

  ## City ID's to collect weather data from.
  city_id = ["4718097"]

  ## APIs to fetch; can contain "weather" or "forecast".
  fetch = ["weather"]

  units = "metric"
  interval = "10m"

# # Ping given url(s) and return statistics
[[inputs.ping]]
#   ## List of urls to ping
  urls = ["www.google.com"]
  count = 4
  interface = "eth0"
  name_override = "google_ping"

# # Monitor wifi signal strength and quality
[[inputs.wireless]]
